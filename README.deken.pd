#N canvas 388 57 692 704 12;
#X declare -path FluidCorpusManipulation;
#X declare -lib fluid_libmanipulation;
#X declare -path FluidCorpusManipulation -lib fluid_libmanipulation;
#X obj 17 13 cnv 15 660 42 empty empty Fluid\ Corpus\ Manipulation 1 22 0 36 #4ba3fb #ffffff 0;
#X obj 17 60 cnv 15 660 17 empty empty Thank\ you\ for\ installing\ Fluid\ Corpus\ Manipulation\ (FluCoMa)! 4 8 0 13 #e0e0e0 #404040 0;
#X obj 17 111 cnv 15 240 20 empty empty Pd\ Configuration 4 10 0 16 #e0e0e0 #404040 0;
#X obj 17 539 cnv 15 240 20 empty empty Introduction 4 10 0 16 #e0e0e0 #404040 0;
#X obj 442 621 FluidCorpusManipulation/fluid.referencelauncher;
#X text 17 137 In order for Pd to find the FluCoMa files \, the installed folder has to be added to Pd's search paths. Depending on your Deken configuration (see 'Edit' -> 'Preferences...' in the Deken menu) \, this is already done., f 57;
#X obj 43 305 declare -path FluidCorpusManipulation;
#X text 17 207 If you want to add the path now \, you can do this either by editing Pd's preferences or by clicking the button on the right \, which will also add the path., f 57;
#X obj 442 232 bng 19 250 50 0 empty empty Add\ folder\ to\ search\ paths 24 10 0 12 #4ba3fb #000000 #000000;
#X obj 441 164 bng 19 250 50 0 empty empty Open\ Pd's\ path\ preferences 24 10 0 12 #4ba3fb #000000 #000000;
#N canvas 92 117 450 300 AddToPaths 0;
#X obj 37 37 inlet;
#N canvas 275 278 497 649 encode 0;
#X obj 49 45 inlet;
#X obj 72 153 list split 1;
#X obj 87 177 list;
#X obj 72 201 t b a;
#X obj 72 129 list fromsymbol;
#X obj 49 519 list tosymbol;
#X obj 49 563 outlet;
#X obj 104 430 list prepend;
#X obj 198 430 t a;
#X obj 49 87 t b a b;
#X obj 49 471 list store;
#X msg 104 268 43 95;
#X msg 135 292 43 100;
#X msg 167 317 43 115;
#X msg 188 341 43 99;
#X text 149 268 space;
#X text 186 293 dollar;
#X text 221 316 semicolon;
#X text 236 341 comma;
#X obj 104 244 route 32 36 59 44 43;
#X msg 208 365 43 43;
#X text 254 365 plus;
#X obj 49 495 list prepend;
#X msg 185 405 43;
#X text 175 43 pd equivalent to pdtk_encodedialog;
#X connect 0 0 9 0;
#X connect 1 0 3 0;
#X connect 1 1 2 1;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X connect 3 1 19 0;
#X connect 4 0 1 0;
#X connect 5 0 6 0;
#X connect 7 0 8 0;
#X connect 7 0 10 1;
#X connect 8 0 7 1;
#X connect 9 0 10 0;
#X connect 9 1 4 0;
#X connect 9 2 23 0;
#X connect 10 0 22 0;
#X connect 11 0 7 0;
#X connect 12 0 7 0;
#X connect 13 0 7 0;
#X connect 14 0 7 0;
#X connect 19 0 11 0;
#X connect 19 1 12 0;
#X connect 19 2 13 0;
#X connect 19 3 14 0;
#X connect 19 4 20 0;
#X connect 19 5 7 0;
#X connect 20 0 7 0;
#X connect 22 0 5 0;
#X connect 23 0 7 1;
#X restore 37 140 pd encode;
#X msg 37 91 dir;
#X obj 37 115 pdcontrol;
#X msg 37 165 \; pd add-to-path \$1 1;
#X connect 0 0 2 0;
#X connect 1 0 4 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X restore 442 257 pd AddToPaths;
#X obj 442 356 bng 19 250 50 0 empty empty Open\ Pd's\ startup\ preferences 24 10 0 12 #4ba3fb #000000 #000000;
#N canvas 645 592 332 142 OpenStartupPrefs 0;
#X obj 30 35 inlet;
#X msg 30 60 \; pd start-startup-dialog;
#X connect 0 0 1 0;
#X restore 442 381 pd OpenStartupPrefs;
#N canvas 645 592 332 142 OpenPathPrefs 0;
#X obj 30 35 inlet;
#X msg 30 60 \; pd start-path-dialog;
#X connect 0 0 1 0;
#X restore 441 189 pd OpenPathPrefs;
#X obj 43 426 declare -lib fluid_libmanipulation;
#X obj 442 561 bng 19 250 50 0 empty empty Open\ object\ overview 24 10 0 12 #4ba3fb #000000 #000000;
#N canvas 748 492 442 244 OpenObjectOverview 0;
#X obj 47 47 inlet;
#X msg 47 84 dir;
#X obj 47 108 pdcontrol;
#X msg 47 159 \; pd open FluidCorpusManipulationOverview.pd \$1;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X restore 442 586 pd OpenObjectOverview;
#X obj 43 489 declare -path FluidCorpusManipulation -lib fluid_libmanipulation, f 64;
#X text 17 567 If you're new to Fluid Corpus Manipulation \, you can explore its objects in the object overview patch., f 57;
#X text 17 263 Another option is to declare this dynamically \, which needs to be done for every Pd session though:, f 57;
#X text 17 463 Both can also be combined in one declaration:, f 57;
#X text 17 619 There's an extensive amount of learning materials on the website \, which you can access through the reference launcher on the right. This launcher is also included in the help patches., f 57;
#X text 17 343 Besides its vast set of separate compiled objects \, FluCoMa includes a library binary that contains even more objects. For Pd to find these \, 'fluid_libmanipulation' needs to be loaded \, which can also be set in the preferences or loaded dynamically via:, f 57;
#X connect 8 0 10 0;
#X connect 9 0 13 0;
#X connect 11 0 12 0;
#X connect 15 0 16 0;
