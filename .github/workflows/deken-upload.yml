name: deken-upload
on:
  workflow_run:
    workflows: ["release"]
    types: ["completed"]

permissions:
  actions: read
  contents: read

env:
  LIBNAME: FluidCorpusManipulation

jobs:
  deken_check:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Download artifacts from triggering release workflow
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install 7z for DMG extraction
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full

      - name: Extract release archives and merge into target folder
        run: |
          mkdir -p ${{env.LIBNAME}}
          mkdir -p release-artifacts
          cd release-artifacts
          find . -type f -name 'FluCoMa-PD-Linux-*.tar.gz' -print0 | xargs -0 -I{} tar -xzf {}
          find . -type f -name 'FluCoMa-PD-Windows-*.zip' -print0 | xargs -0 -I{} unzip -oq {}
          find . -type f -name 'FluCoMa-PD-Mac.dmg' -print0 | xargs -0 -I{} 7z x -y -o. {} >/dev/null || true
          
          find . -type d -name 'FluidCorpusManipulation' -print0 | while IFS= read -r -d '' d; do
            rsync -a "$d"/ ../${{env.LIBNAME}}/
          done

      - name: Get version from release tag
        id: get-version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(gh release list --repo="${{ github.repository }}" --limit=1 --json tagName --jq '.[0].tagName // empty' | tr -d '\n')
          : "${VERSION:?No release tag found}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Using version: $VERSION"

      - name: Create Deken package and print contents
        shell: bash
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          mkdir -p package
          docker run --rm --user $(id -u) --volume ./${{env.LIBNAME}}:/${{env.LIBNAME}} --volume ./package:/package registry.git.iem.at/pd/deken \
            deken package --output-dir /package --version "${VERSION}" /${{env.LIBNAME}}

          dek_file=$(ls package/*.dek | head -n 1)
          echo -e "## \`$(basename "$dek_file")\`" | tee -a $GITHUB_STEP_SUMMARY
          echo '```' | tee -a $GITHUB_STEP_SUMMARY
          unzip -l "$dek_file" | awk 'NR>3 {print $4}' | sed '/^$/d' | sort | tee -a $GITHUB_STEP_SUMMARY
          echo '```' | tee -a $GITHUB_STEP_SUMMARY

      - name: Upload Deken package artifact
        uses: actions/upload-artifact@v4
        with:
          name: deken-package-${{ steps.get-version.outputs.version }}
          path: package/*.dek
          retention-days: 30

  deken_upload:
    runs-on: ubuntu-latest
    needs: [deken_check]
    if: ${{ github.event.workflow_run.head_branch == 'production' }}
    steps:
      - name: Checkout source (for source upload)
        uses: actions/checkout@v4
        with:
          path: ${{env.LIBNAME}}-src

      - name: Download deken package artifact
        uses: actions/download-artifact@v4
        with:
          name: deken-package-${{ needs.deken_check.outputs.version }}
          path: package

      - name: Upload Deken Package
        shell: bash
        env:
          DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
          DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
        run: |
          VERSION=${{ needs.deken_check.outputs.version }}
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
            --volume "$PWD/package":/package registry.git.iem.at/pd/deken \
            deken upload --name ${{env.LIBNAME}} --version "${VERSION}" --no-source-error "/package/$(basename package/*.dek)"
          # Upload source code
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
            --volume ./${{env.LIBNAME}}-src:/${{env.LIBNAME}} registry.git.iem.at/pd/deken \
            deken upload --name ${{env.LIBNAME}} --version "${VERSION}" /${{env.LIBNAME}}
