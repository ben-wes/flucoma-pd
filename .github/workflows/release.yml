name: release
on:
  workflow_dispatch:

env:
  LIBNAME: flucoma

jobs:
  macbuild:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: flucoma/actions/env@main 
      - uses: flucoma/actions/pd@v5
        with:
          branch: origin/${{ github.ref_name }}

      # - name: sign binaries
      #   uses: flucoma/actions/distribution@main
      #   with:
      #     glob: '-e pd_darwin'
      #     package: 'release-packaging'
      #     output_type: 'dmg'
      #     output: FluCoMa-PD-Mac
      #     cert: ${{ secrets.CERT }}
      #     certpwd: ${{ secrets.CERTPWD }}
      #     teamid: ${{ secrets.WWDRTEAMID }}
      #     apppwd: ${{ secrets.APPSTORECONNECTPWD }}
      #     appusr: ${{ secrets.APPSTORECONNECTUSERNAME }}

      - name: create unsigned DMG
        run: |
          mkdir -p /tmp/dmg-staging
          cp -r release-packaging/FluidCorpusManipulation /tmp/dmg-staging/
          hdiutil create -volname "FluCoMa-PD" -srcfolder /tmp/dmg-staging -ov -format UDZO release-packaging/FluCoMa-PD-Mac.dmg

      - uses: actions/upload-artifact@v4.3.6
        with:
          name: macbuild
          path: release-packaging/FluCoMa-PD-Mac.dmg

  winbuild:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: flucoma/actions/env@main         
      - uses: flucoma/actions/pd@v5
        with:
          branch: origin/${{ github.ref_name }}

      - name: compress archive
        run: 7z a FluCoMa-PD-Windows-x64.zip FluidCorpusManipulation
        working-directory: release-packaging

      - uses: actions/upload-artifact@v4.3.6 
        with:
          name: winbuild
          path: release-packaging/FluCoMa-PD-Windows-x64.zip

  linuxbuild:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - uses: flucoma/actions/env@main
      - uses: flucoma/actions/pd@v5
        with:
          branch: origin/${{ github.ref_name }} 

      - name: compress archive
        run: tar -zcvf FluCoMa-PD-Linux-x64.tar.gz FluidCorpusManipulation
        working-directory: release-packaging

      - uses: actions/upload-artifact@v4.3.6
        with:
          name: linuxbuild 
          path: release-packaging/FluCoMa-PD-Linux-x64.tar.gz
          
      - id: get-version
        run: echo "version=$(cat flucoma.version.rc)" >> $GITHUB_OUTPUT
        working-directory: build/_deps/flucoma-core-src
  
  release:
    runs-on: ubuntu-22.04
    needs: [macbuild, winbuild, linuxbuild]
    outputs:
      version: ${{ needs.linuxbuild.outputs.version }}

    steps:
      #### LINUX ####
      - uses: actions/download-artifact@v4.1.7
        with:
          name: linuxbuild

      #### MAC ####
      - uses: actions/download-artifact@v4.1.7
        with:
          name: macbuild

      #### WINDOWS ####
      - uses: actions/download-artifact@v4.1.7
        with:
          name: winbuild

      - name: delete pre-existing release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true # default: false
          tag_name: ${{ needs.linuxbuild.outputs.version }} # tag name to delete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: package and upload
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.linuxbuild.outputs.version }}
          body: "This is a release build of the FluCoMa PureData package. The build hash is ${{ github.sha }}"
          files: FluCoMa*
          prerelease: true
          tag_name: ${{ needs.linuxbuild.outputs.version }}
          target_commitish: ${{ github.sha }}
          draft: false

  deken_check_and_upload:
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{env.LIBNAME}}-src

      #### LINUX ####
      - uses: actions/download-artifact@v4.1.7
        with:
          name: linuxbuild
          path: release-artifacts

      #### MAC ####
      - uses: actions/download-artifact@v4.1.7
        with:
          name: macbuild
          path: release-artifacts

      #### WINDOWS ####
      - uses: actions/download-artifact@v4.1.7
        with:
          name: winbuild
          path: release-artifacts

      - name: Install 7z for DMG extraction
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full

      - name: Extract release archives
        run: |
          mkdir -p ${{env.LIBNAME}}
          cd release-artifacts
          
          # Extract Linux
          if [ -f FluCoMa-PD-Linux-x64.tar.gz ]; then
            tar -xzf FluCoMa-PD-Linux-x64.tar.gz
            cp -r FluidCorpusManipulation/* ../${{env.LIBNAME}}/
          fi
          
          # Extract Windows
          if [ -f FluCoMa-PD-Windows-x64.zip ]; then
            unzip -oq FluCoMa-PD-Windows-x64.zip
            cp -r FluidCorpusManipulation/* ../${{env.LIBNAME}}/
          fi
          
          # Extract macOS (DMG - mount and copy)
          if [ -f FluCoMa-PD-Mac.dmg ]; then
            mkdir -p /tmp/flucoma-dmg
            # Extract DMG on Linux using 7z (hdiutil is macOS-only)
            if command -v 7z >/dev/null 2>&1; then
              7z x -y -o/tmp/flucoma-dmg FluCoMa-PD-Mac.dmg >/dev/null || true
              MAC_PAYLOAD=$(find /tmp/flucoma-dmg -type d -name FluidCorpusManipulation | head -n 1 || true)
              if [ -n "$MAC_PAYLOAD" ]; then
                cp -r "$MAC_PAYLOAD"/* ../${{env.LIBNAME}}/ || true
              fi
            else
              echo "7z not available; skipping macOS payload merge"
            fi
          fi

      - name: Check Deken Package
        shell: bash
        run: |
          VERSION=${{ needs.release.outputs.version }}
          echo "## package" | tee -a $GITHUB_STEP_SUMMARY
          mkdir -p package
          docker run --rm --user $(id -u) --volume ./${{env.LIBNAME}}:/${{env.LIBNAME}} --volume ./package:/package registry.git.iem.at/pd/deken \
            deken package --output-dir /package --version "${VERSION}" /${{env.LIBNAME}}

          dek_files=$(ls package/*.dek)
          for dek_file in $dek_files; do
            filename=$(basename "$dek_file")
            echo -e "#### \`$filename\`" | tee -a $GITHUB_STEP_SUMMARY
            echo '```' | tee -a $GITHUB_STEP_SUMMARY
            unzip -l "$dek_file" | awk 'NR>3 {print $4}' | sed '/^$/d' | sort | tee -a $GITHUB_STEP_SUMMARY
            echo '```' | tee -a $GITHUB_STEP_SUMMARY
          done

      - name: Upload Deken Package
        if: ${{ !contains(needs.release.outputs.version, 'test') }}
        shell: bash
        env:
          DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
          DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
        run: |
          VERSION=${{ needs.release.outputs.version }}
          # Upload platform-specific package
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
            --volume ./${{env.LIBNAME}}:/${{env.LIBNAME}} registry.git.iem.at/pd/deken \
            deken upload --name ${{env.LIBNAME}} --version "${VERSION}" --no-source-error /${{env.LIBNAME}}
          # Upload source code
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
            --volume ./${{env.LIBNAME}}-src:/${{env.LIBNAME}} registry.git.iem.at/pd/deken \
            deken upload --name ${{env.LIBNAME}} --version "${VERSION}" /${{env.LIBNAME}}
